name: Build

on:
  push:
    paths-ignore:
      - README.md

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix_test: ${{ steps.set-matrix.outputs.matrix_test }}
    steps:
     - name: Checkout to repository
       uses: actions/checkout@v3
     - name: Set matrix data
       id: set-matrix
       run: |
         echo "matrix=$(jq -c . < ./rpms/config.json)" >> $GITHUB_OUTPUT
         echo "matrix_test=$(jq -c 'del(.include[] | select(.base_image == "rockylinux:8" and .target_arch == "aarch64" and .nexus_classifier == "el8-aarch64"))' < rpms/config.json)" >> $GITHUB_OUTPUT

  build:
    name: Build on ${{ matrix.base_image }} for ${{ matrix.target_arch }}
    runs-on: ubuntu-latest
    needs: configure
    strategy:
      matrix: ${{ fromJson(needs.configure.outputs.matrix) }}
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set build variables
        id: variables
        run: |
          echo "imagemagick_version=$(cat ./imagemagick-version)" >> $GITHUB_OUTPUT
          echo "imagemagick_release=$(cat ./release-version)" >> $GITHUB_OUTPUT

      - name: Prepare image
        run: docker build . -t buildenv --build-arg BASE_IMAGE=${{ matrix.base_image }}
        working-directory: rpms

      - name: Build and Install
        run: docker run --name build buildenv ${{ steps.variables.outputs.imagemagick_version }} ${{ matrix.target_arch }}

      - name: Retrieve built packages
        env:
          IMAGEMAGICK_VERSION: ${{ steps.variables.outputs.imagemagick_version }}
        run: |
          docker cp build:/root/rpmbuild/RPMS/ .
          ls -l RPMS/

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.nexus_classifier }}-rpm
          path: RPMS/${{ matrix.target_arch }}/*.rpm

  test:
    name: Test on ${{ matrix.base_image }} for ${{ matrix.target_arch }}
    runs-on: ubuntu-latest
    needs: 
      - configure
      - build
    strategy:
      matrix: ${{ fromJson(needs.configure.outputs.matrix_test) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set build variables
        id: variables
        run: |
          echo "imagemagick_version=$(cat ./imagemagick-version)" >> $GITHUB_OUTPUT
          echo "imagemagick_release=$(cat ./release-version)" >> $GITHUB_OUTPUT

      - name: Download RPMs
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.nexus_classifier }}-rpm

      - name: List RPMs
        run: ls -R *.rpm

      - name: Create a container
        run: |
          docker run --name testenv -d -it ${{ matrix.base_image }}

      - name: Copy RPMs
        run: |
          docker cp ImageMagick-libs-${{ steps.variables.outputs.imagemagick_version }}.${{ matrix.target_arch }}.rpm testenv:/
          docker cp ImageMagick-${{ steps.variables.outputs.imagemagick_version }}.${{ matrix.target_arch }}.rpm testenv:/

      - name: Install RPMs
        run: |
          docker exec -t testenv yum install -y epel-release
          docker exec -t testenv yum install -y ImageMagick-libs-${{ steps.variables.outputs.imagemagick_version }}.${{ matrix.target_arch }}.rpm
          docker exec -t testenv yum install -y ImageMagick-${{ steps.variables.outputs.imagemagick_version }}.${{ matrix.target_arch }}.rpm

      - name: Test RPMs output
        run: |
          echo "ldd output of convert"
          docker exec -t testenv ldd /usr/bin/convert
          echo "Testing convert command"
          docker exec -t testenv convert -version
          echo "Creating test image file"
          convert -size 32x32 xc:transparent test.png
          echo "Converting png to jpg"
          convert test.png test1.jpg

  deploy:
    name: Deploy ${{ matrix.base_image }} for ${{ matrix.target_arch }}
    runs-on: ubuntu-latest
    needs: 
      - build
      - test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set build variables
        id: variables
        run: |
          echo "imagemagick_version=$(cat ./imagemagick-version)" >> $GITHUB_OUTPUT
          echo "imagemagick_release=$(cat ./release-version)" >> $GITHUB_OUTPUT

      - name: Download RPMs
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.nexus_classifier }}-rpm

      - name: List RPMs
        run: ls -R *.rpm

      - name: Deploy to nexus
        uses: Alfresco/alfresco-build-tools/.github/actions/maven-deploy-file@9fd78f71c1ccbad03b79b81db541693cd9cfc89b
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          group-id: org.imagemagick
          artifact-id: imagemagick-distribution
          repository-url: https://nexus.alfresco.com/nexus/content/repositories/thirdparty/
          version: ${{ steps.variables.outputs.imagemagick_version }}-ci-${{ steps.variables.outputs.imagemagick_release }}
          generate-pom: false
          file: ImageMagick-${{ steps.variables.outputs.imagemagick_version }}.${{ matrix.target_arch }}.rpm
          classifier: ${{ matrix.nexus_classifier }}
          files: ImageMagick-libs-${{ steps.variables.outputs.imagemagick_version }}.${{ matrix.target_arch }}.rpm
          classifiers: ${{ matrix.nexus_classifier }}-libs
          types: rpm
          maven-username: ${{ secrets.NEXUS_USERNAME }}
          maven-password: ${{ secrets.NEXUS_PASSWORD }}

  build_ubuntu:
    name: Build on ubuntu:${{ matrix.image_tag }} for x86_64
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image_tag:
          - 22.04
          - 20.04
          - 18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set build variables
        id: variables
        run: |
          echo "imagemagick_version=$(cat ./imagemagick-version)" >> $GITHUB_OUTPUT
          echo "imagemagick_release=$(cat ./release-version)" >> $GITHUB_OUTPUT

      - name: Prepare image
        run: docker build . -t buildenv --build-arg IMAGE_TAG=${{ matrix.image_tag }}
        working-directory: debs

      - name: Build and Install
        run: docker run --name build buildenv ${{ steps.variables.outputs.imagemagick_version }}

      - name: Retrieve built packages
        env:
          IMAGEMAGICK_VERSION: ${{ steps.variables.outputs.imagemagick_version }}
        run: |
          docker cp build:/build/imagemagick-alfresco_${IMAGEMAGICK_VERSION}_amd64.deb .
          docker cp build:/build/imagemagick-alfresco-dev_${IMAGEMAGICK_VERSION}_amd64.deb .

      - uses: actions/upload-artifact@v3
        with:
          name: ubuntu${{ matrix.image_tag }}-deb
          path: "*.deb"
      - name: Deploy to nexus
        uses: Alfresco/alfresco-build-tools/.github/actions/maven-deploy-file@9fd78f71c1ccbad03b79b81db541693cd9cfc89b
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          group-id: org.imagemagick
          artifact-id: imagemagick-distribution
          repository-url: https://nexus.alfresco.com/nexus/content/repositories/thirdparty/
          version: ${{ steps.variables.outputs.imagemagick_version }}-ci-${{ steps.variables.outputs.imagemagick_release }}
          generate-pom: false
          file: ${{ github.workspace }}/imagemagick-alfresco_${{ steps.variables.outputs.imagemagick_version }}_amd64.deb
          classifier: ubuntu-${{ matrix.image_tag }}
          files: ${{ github.workspace }}/imagemagick-alfresco-dev_${{ steps.variables.outputs.imagemagick_version }}_amd64.deb
          classifiers: ubuntu-${{ matrix.image_tag }}-dev
          types: deb
          maven-username: ${{ secrets.NEXUS_USERNAME }}
          maven-password: ${{ secrets.NEXUS_PASSWORD }}
